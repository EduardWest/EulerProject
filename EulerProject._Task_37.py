#!/usr/bin/env python
# coding: utf-8

# In[ ]:


'''Укорачиваемые простые числа
Число 3797 обладает интересным свойством.
Будучи само по себе простым числом, из него можно последовательно выбрасывать цифры слева направо, 
число же при этом остается простым на каждом этапе: 3797, 797, 97, 7. Точно таким же способом можно 
выбрасывать цифры справа налево: 3797, 379, 37, 3.

Найдите сумму единственных одиннадцати простых чисел, из которых можно выбрасывать цифры как справа 
налево, так и слева направо, но числа при этом остаются простыми.

ПРИМЕЧАНИЕ: числа 2, 3, 5 и 7 таковыми не считаются.'''


# In[ ]:


def isPrime(n): # Функция для определения простоты числа
    if n == 1:
        return False
    if n % 2 == 0:
        return n == 2
    d = 3
    while d * d <= n and n % d != 0:
        d += 2
    return d * d > n


# In[ ]:


# Задача 37 Укорачиваемые простые числа. isPrime(n) - собственная функция для определения числа на простоту. Число 1 по условию не является простым
sub = 0
for i in range(2, 40 ** 4 + 1):
    if i == 2 or i == 3 or i == 5 or i == 7:
        continue
    if isPrime(i):
        x = 0
        for j in range(1, len(str(i))):
            if isPrime(int(str(i)[:-j])) and isPrime(int(str(i)[j:])): # проверяем прстое число, является ли оно укороченным
                x += 1
            else:
                break
        if x == j:
            sub += i
            print(i)
print(sub)


# In[ ]:


# Ответ на задачу - 748317

